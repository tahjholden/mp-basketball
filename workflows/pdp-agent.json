{
  "name": "PDP Agent",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "agent_events",
        "filters": {
          "conditions": [
            {
              "keyName": "event_type",
              "condition": "eq",
              "keyValue": "update_pdp"
            },
            {
              "keyName": "status",
              "condition": "eq",
              "keyValue": "pending"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        220,
        -100
      ],
      "id": "cb181f2a-a6e0-4188-8a40-d82bd7732d04",
      "name": "AgentEvents_Trigger",
      "credentials": {
        "supabaseApi": {
          "id": "snX7zXf3hb1iETnD",
          "name": "Supabase <-> N8N MPBos"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "observation",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        440,
        -100
      ],
      "id": "2d13bab7-744e-4c23-bedd-0dc1ccdbbdfd",
      "name": "Fetch_Observations_For_Player",
      "credentials": {
        "supabaseApi": {
          "id": "snX7zXf3hb1iETnD",
          "name": "Supabase <-> N8N MPBos"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all observations (fetched as .json array)\nconst obs = $input.all().map(i => i.json);\n\n// Group by player_id\nconst playerGroups = {};\nobs.forEach(item => {\n  const pid = item.player_id;\n  if (!playerGroups[pid]) playerGroups[pid] = [];\n  playerGroups[pid].push(item);\n});\n\nconst summaries = [];\n\nfor (const player_id in playerGroups) {\n  const allSkills = [];\n  const allConstraints = [];\n  playerGroups[player_id].forEach(obs => {\n    if (Array.isArray(obs.tagged_skills)) allSkills.push(...obs.tagged_skills);\n    if (Array.isArray(obs.tagged_constraints)) allConstraints.push(...obs.tagged_constraints);\n  });\n\n  // Count occurrences\n  const countTags = arr =>\n    arr.reduce((acc, tag) => {\n      acc[tag] = (acc[tag] || 0) + 1;\n      return acc;\n    }, {});\n\n  const skillsSummary = countTags(allSkills);\n  const constraintsSummary = countTags(allConstraints);\n\n  summaries.push({\n    json: {\n      player_id,\n      skills_summary: skillsSummary,\n      constraints_summary: constraintsSummary,\n      last_updated: new Date().toISOString()\n    }\n  });\n}\n\nreturn summaries;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        -100
      ],
      "id": "755ade3d-2dfb-4426-a0aa-a8ee7437b1f4",
      "name": "Aggregate_Observations_Skills_Tags"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://htvyruodlvdbpfsnmuhz.supabase.co/rest/v1/pdp",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh0dnlydW9kbHZkYnBmc25tdWh6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNzg1MTQsImV4cCI6MjA2Mjc1NDUxNH0.0E_lA1rY5DsTHGwJGcyafpO0Wd61R9RvcAx01ky6gHg"
            },
            {
              "name": "Authorization",
              "value": "=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh0dnlydW9kbHZkYnBmc25tdWh6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNzg1MTQsImV4cCI6MjA2Mjc1NDUxNH0.0E_lA1rY5DsTHGwJGcyafpO0Wd61R9RvcAx01ky6gHg"
            },
            {
              "name": "Prefer",
              "value": "resolution=merge-duplicates"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "=$items(\"Aggregate_Observations_Skills_Tags\").map(item => ({\n  player_id: item.json.player_id || undefined,\n  skills_summary: item.json.skills_summary,\n  constraints_summary: item.json.constraints_summary,\n  last_updated: $now,\n  // Add other fields as needed\n}))",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1256,
        -100
      ],
      "id": "d4df1e27-b217-4c3c-be19-bc6481c004a4",
      "name": "Insert_New_PDP"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "agent_events",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$json[\"id\"]}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "handled"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1476,
        -100
      ],
      "id": "ac594401-6a2d-44b4-a132-cee83bd78297",
      "name": "Mark_Event_As_Handled",
      "credentials": {
        "supabaseApi": {
          "id": "snX7zXf3hb1iETnD",
          "name": "Supabase <-> N8N MPBos"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "agent_events",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "agent_id",
              "fieldValue": "pdp_agent"
            },
            {
              "fieldId": "details",
              "fieldValue": "={{ $json[\"pdp_id\"] ? JSON.stringify({ \"pdp_id\": $json[\"pdp_id\"], \"note\": \"Plan updated at \" + $now }) : \"\" }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "pending"
            },
            {
              "fieldId": "player_id",
              "fieldValue": "={{$json[\"player_id\"]}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1696,
        -100
      ],
      "id": "f636e76a-ccce-4078-9156-924ffb2e13f9",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "snX7zXf3hb1iETnD",
          "name": "Supabase <-> N8N MPBos"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "player",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$json.player_id}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        880,
        -220
      ],
      "id": "6c7b38d1-8fe7-4ee9-9d9c-05b97970cfa3",
      "name": "Fetch_Player_Name",
      "credentials": {
        "supabaseApi": {
          "id": "snX7zXf3hb1iETnD",
          "name": "Supabase <-> N8N MPBos"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $input.all();\nif (rows.length !== 1) {\n  throw new Error(`Expected 1 player record for ${$json.player_id}, found ${rows.length}`);\n}\nconst playerName = rows[0].json.display_name;\nconst agg = $items(\"Aggregate_Observations_Skills_Tags\", 0, $itemIndex)[0].json;\nreturn [{ json: { ...agg, player_name: playerName } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        -160
      ],
      "id": "f1f437d3-3e00-4b0d-b116-d9d483d3405c",
      "name": "Validate_Player_Name"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=Generate a detailed Player Development Plan (PDP) for {{player_name}} using the following data:\n\n- Observations: {{joined_observations}}\n- Skill Tags: {{joined_tags}}\n- Constraint Tags: {{joined_constraints}}\n\nInstructions:\n- Structure the PDP using these sections:\n    1. Player System Snapshot\n    2. Movement System Characteristics\n    3. Behavioral Attractors\n    4. Rate Limiters (list with constraint tags and coach cues)\n    5. Constraint-Led Interventions (detail intervention, expected outcome, and link to tags)\n    6. Long-term System Targets (big picture, tied to skill/tag trends)\n    7. Key Design Rules (decision frameworks and priorities)\n\n- Use language suitable for a director or senior coach, referencing ecological dynamics/CLA.\n- Output in Markdown, robust enough for full tag review and coach audit.",
              "role": "system"
            },
            {
              "content": "=Create a comprehensive Player Development Plan (PDP) for {{player_name}} based on the following data.\n\nObservations:\n{{joined_observations}}\n\nSkill Tags:\n{{joined_tags}}\n\nConstraint Tags:\n{{joined_constraints}}\n\nInstructions:\n- Structure the PDP with these sections:\n    1. Player System Snapshot\n    2. Movement System Characteristics\n    3. Behavioral Attractors\n    4. Rate Limiters (with constraint tags and coach cues)\n    5. Constraint-Led Interventions (detail intervention, expected outcome, and link to tags)\n    6. Long-term System Targets (tied to skills and constraints)\n    7. Key Design Rules (decision frameworks and priorities)\n\n- Use clear, precise, and technical language suitable for directors and experienced coaches.\n- Reference tags and constraints directly.\n- Be specific and robust\u2014assume this PDP will inform all downstream, more concise versions.\n- Output as Markdown.\n\nGenerate only the full PDP, no summary or meta comments."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        880,
        -100
      ],
      "id": "0a2a9408-7ff8-4b4a-8844-5812fc84ca15",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "KhaGQw1SlGfhaasb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 22
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        20,
        -100
      ],
      "id": "c70b35f5-f80f-44a7-a58c-6a50463df2ad",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst agg = $items(\"Aggregate_Observations_Skills_Tags\");\nfor (let i = 0; i < items.length; i++) {\n  const content = items[i].json?.message?.content || '';\n  const empty = !content.trim();\n  const truncated = items[i].json?.finish_reason === 'length' || content.trim().endsWith('...');\n  if (empty || truncated) {\n    items[i].json.truncated = true;\n    const obsItem = agg[i];\n    if (obsItem && obsItem.json.joined_observations) {\n      const original = obsItem.json.joined_observations;\n      const shortened = original.slice(0, Math.floor(original.length * 0.75));\n      items[i].json.shorter_observations = shortened;\n    }\n    console.warn('OpenAI response truncated or empty; consider retrying.');\n  }\n}\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1070,
        -100
      ],
      "id": "8e02047f-dfe6-409c-ac95-a43ee98d13b6",
      "name": "Code_CheckOpenAIOutput"
    }
  ],
  "pinData": {
    "AgentEvents_Trigger": [
      {
        "json": {
          "event_type": "update_pdp",
          "status": "pending",
          "player_id": "8ce6193d-3041-4f11-8c1d-a63d1ed12569",
          "agent_id": "test_agent",
          "details": {
            "note": "Test event for PDP Agent"
          },
          "id": "b8aeff47-4379-43de-8af1-123456789abc"
        }
      }
    ]
  },
  "connections": {
    "AgentEvents_Trigger": {
      "main": [
        [
          {
            "node": "Fetch_Observations_For_Player",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch_Observations_For_Player": {
      "main": [
        [
          {
            "node": "Aggregate_Observations_Skills_Tags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate_Observations_Skills_Tags": {
      "main": [
        [
          {
            "node": "Fetch_Player_Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch_Player_Name": {
      "main": [
        [
          {
            "node": "Validate_Player_Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate_Player_Name": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert_New_PDP": {
      "main": [
        [
          {
            "node": "Mark_Event_As_Handled",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark_Event_As_Handled": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Code_CheckOpenAIOutput",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AgentEvents_Trigger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code_CheckOpenAIOutput": {
      "main": [
        [
          {
            "node": "Insert_New_PDP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6e14dc7c-47d6-480b-8cfd-c8c100805d31",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0abe8dd3af7b84dd650128b454cc932a6aae1d69499f17eccb6a7dec666a07a5"
  },
  "id": "ZQGTbxHU5ImEZuu5",
  "tags": []
}
